#!/usr/bin/env bash

TOP=..
LD=$(command -v ld)
CC=$(command -v gcc)

# What are we building?

TGT=$1
case $TGT in
  "galua")
     NEWSTATE="lua_newstate_nondbg"
     WRITESTRING="galua_writestring_nondbg"
  ;;
  "galua-dbg")
     NEWSTATE="lua_newstate_dbg"
     WRITESTRING="galua_writestring_dbg"
  ;;
  *)
     echo "Usage: $(basename $0) (galua | galua-dbg)"
     exit 1
  ;;
esac


# Make the entry point for "newstate".
$CC -DNEWSTATE=${NEWSTATE} -DWRITESTRING=${WRITESTRING} -c newstate.c


# Build library

LIBNAME=lib${TGT}.a

DIST_DIR=$(stack path --dist-dir)

# Figure out which libraries we need to package together.
HS_LIBRARIES_LIST_FILE=$TOP/$TGT/$DIST_DIR/build/autogen/HS_LIBRARIES_LIST
HS_LIBRARY_PATHS_LIST_FILE=$TOP/$TGT/$DIST_DIR/build/autogen/HS_LIBRARY_PATHS_LIST
EXTRA_LIBRARIES_LIST_FILE=$TOP/$TGT/$DIST_DIR/build/autogen/EXTRA_LIBRARIES_LIST

if [ ! -e "$HS_LIBRARIES_LIST_FILE" ]; then
  echo "Failed to find the file \`HS_LIBRARIES_LIST\` for \`$TGT\`."
  echo "*** It is generated by \`Setup.hs\` after configuration."
  echo "*** Perhaps \`$TGT\` was not built?"
  exit 2
fi

HS_LIBRARIES_LIST=$(cat $HS_LIBRARIES_LIST_FILE)
HS_LIBRARY_PATHS_LIST=$(cat $HS_LIBRARY_PATHS_LIST_FILE)
EXTRA_LIBRARIES_LIST=$(cat $EXTRA_LIBRARIES_LIST_FILE)

declare -a HS_LD_FLAGS
declare -a C_LD_FLAGS

IFS=$'\n'; for lib in $HS_LIBRARY_PATHS_LIST
do
        HS_LD_FLAGS+=("-L$lib")
done

IFS=$'\n'; for lib in $HS_LIBRARIES_LIST
do
        HS_LD_FLAGS+=("-l$lib")
done

IFS=$'\n'; for lib in $EXTRA_LIBRARIES_LIST
do
        C_LD_FLAGS+=("-l$lib")
done


# What OS are we running on?
UNAME=$(uname -s)
ARCH=$(arch)

case $UNAME in
  "Linux" | "FreeBSD" )
      $LD -o $LIBNAME -arch $ARCH --relocatable --whole-archive \
        newstate.o liblualibs.a "${HS_LD_FLAGS[@]}"

      # This only seems to work on 64-bit systems
      if [ "$ARCH" = "x86_64" ]; then
          # First, we make all symbols local
          SYM_FILE=$(mktemp SYMBOLS.XXXXXX)
          nm $LIBNAME | awk '{ print $3 }' | grep -v '^$' > $SYM_FILE
          objcopy --localize-symbols=$SYM_FILE $LIBNAME

          # Next, we make the API global
          # Our API has an extra `_` at the start of each name (for Mac) so drop it
          sed 's/^.//' lua_api.txt > $SYM_FILE
          objcopy --globalize-symbols=$SYM_FILE $LIBNAME
          rm $SYM_FILE

          strip --strip-unneeded $LIBNAME

          # Now, clean up unneeded stuff
          objcopy --strip-unneeded $LIBNAME
      fi

      # XXX: Unfortunately, --strip-unneeded does not strip as much as we'd like
      # because a bunch of the local symbols are still mentioned in relocation records.
      #
      # It would appear that at the moment there is no way for `ld` to resolve and
      # eliminate these relocations, which is unfortunate.
      # reference:
      #     https://www.sourceware.org/ml/binutils/2008-02/msg00053.html
      #     https://www.sourceware.org/ml/binutils/2008-02/msg00057.html
      #
      # As a result, we the library is quite large.  Fortunately, when linked in an
      # executable, the redundant symbols may be safely stripped, and we get
      # a reasonabley sized executable.

      # The pthread dependency isn't captured in the GHC package configuration files.
      C_LD_FLAGS+=("-lpthread")

      # Build executable
      $CC main.c -g -o $TGT -I$TOP/galua-c/inplace/include/galua -std=gnu99 \
              -rdynamic -L. -l$TGT "${C_LD_FLAGS[@]}"
      strip --strip-unneeded $TGT

  ;;
  "Darwin")
    $LD -r -o $LIBNAME \
       -arch x86_64 \
       -exported_symbols_list lua_api.txt \
       newstate.o \
       liblualibs.a \
       "${HS_LD_FLAGS[@]}"

    # Build executable
    $CC main.c -g \
            -o $TGT \
            -std=gnu99 \
            -Wl,-no_compact_unwind \
            -I$TOP/galua-c/inplace/include/galua \
            -L. -l$TGT \
            "${C_LD_FLAGS[@]}"

  ;;
  *) echo "Unknown OS: $UNAME"
     exit 3
esac



